// Code generated by protoc-gen-go.
// source: sa/proto/sa.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	sa/proto/sa.proto

It has these top-level messages:
	RegistrationID
	JsonWebKey
	AuthorizationID
	GetValidAuthorizationsRequest
	ValidAuthorizations
	CertificateStatus
	Serial
	Range
	Count
	CountCertificatesByNamesRequest
	CountByNames
	CountRegistrationsByIPRequest
	GetSCTReceiptRequest
	CountFQDNSetsRequest
	FQDNSetExistsRequest
	Exists
	MarkCertificateRevokedRequest
	AddCertificateResponse
	SignedCertificateTimestamp
	RevokeAuthorizationsByDomainRequest
	RevokeAuthorizationsByDomainResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/letsencrypt/boulder/core/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type RegistrationID struct {
	Id               *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RegistrationID) Reset()                    { *m = RegistrationID{} }
func (m *RegistrationID) String() string            { return proto1.CompactTextString(m) }
func (*RegistrationID) ProtoMessage()               {}
func (*RegistrationID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegistrationID) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type JsonWebKey struct {
	Jwk              *string `protobuf:"bytes,1,opt,name=jwk" json:"jwk,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *JsonWebKey) Reset()                    { *m = JsonWebKey{} }
func (m *JsonWebKey) String() string            { return proto1.CompactTextString(m) }
func (*JsonWebKey) ProtoMessage()               {}
func (*JsonWebKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JsonWebKey) GetJwk() string {
	if m != nil && m.Jwk != nil {
		return *m.Jwk
	}
	return ""
}

type AuthorizationID struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthorizationID) Reset()                    { *m = AuthorizationID{} }
func (m *AuthorizationID) String() string            { return proto1.CompactTextString(m) }
func (*AuthorizationID) ProtoMessage()               {}
func (*AuthorizationID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthorizationID) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type GetValidAuthorizationsRequest struct {
	RegistrationID   *int64   `protobuf:"varint,1,opt,name=registrationID" json:"registrationID,omitempty"`
	Domains          []string `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	Now              *int64   `protobuf:"varint,3,opt,name=now" json:"now,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetValidAuthorizationsRequest) Reset()                    { *m = GetValidAuthorizationsRequest{} }
func (m *GetValidAuthorizationsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetValidAuthorizationsRequest) ProtoMessage()               {}
func (*GetValidAuthorizationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetValidAuthorizationsRequest) GetRegistrationID() int64 {
	if m != nil && m.RegistrationID != nil {
		return *m.RegistrationID
	}
	return 0
}

func (m *GetValidAuthorizationsRequest) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetValidAuthorizationsRequest) GetNow() int64 {
	if m != nil && m.Now != nil {
		return *m.Now
	}
	return 0
}

type ValidAuthorizations struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ValidAuthorizations) Reset()                    { *m = ValidAuthorizations{} }
func (m *ValidAuthorizations) String() string            { return proto1.CompactTextString(m) }
func (*ValidAuthorizations) ProtoMessage()               {}
func (*ValidAuthorizations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type CertificateStatus struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CertificateStatus) Reset()                    { *m = CertificateStatus{} }
func (m *CertificateStatus) String() string            { return proto1.CompactTextString(m) }
func (*CertificateStatus) ProtoMessage()               {}
func (*CertificateStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Serial struct {
	Serial           *string `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Serial) Reset()                    { *m = Serial{} }
func (m *Serial) String() string            { return proto1.CompactTextString(m) }
func (*Serial) ProtoMessage()               {}
func (*Serial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Serial) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

type Range struct {
	Earliest         *int64 `protobuf:"varint,1,opt,name=earliest" json:"earliest,omitempty"`
	Latest           *int64 `protobuf:"varint,2,opt,name=latest" json:"latest,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto1.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Range) GetEarliest() int64 {
	if m != nil && m.Earliest != nil {
		return *m.Earliest
	}
	return 0
}

func (m *Range) GetLatest() int64 {
	if m != nil && m.Latest != nil {
		return *m.Latest
	}
	return 0
}

type Count struct {
	Count            *int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Count) Reset()                    { *m = Count{} }
func (m *Count) String() string            { return proto1.CompactTextString(m) }
func (*Count) ProtoMessage()               {}
func (*Count) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Count) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CountCertificatesByNamesRequest struct {
	Range            *Range   `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	Names            []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CountCertificatesByNamesRequest) Reset()                    { *m = CountCertificatesByNamesRequest{} }
func (m *CountCertificatesByNamesRequest) String() string            { return proto1.CompactTextString(m) }
func (*CountCertificatesByNamesRequest) ProtoMessage()               {}
func (*CountCertificatesByNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CountCertificatesByNamesRequest) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *CountCertificatesByNamesRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type CountByNames struct {
	CountByNames     []*CountByNames_MapElement `protobuf:"bytes,1,rep,name=countByNames" json:"countByNames,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CountByNames) Reset()                    { *m = CountByNames{} }
func (m *CountByNames) String() string            { return proto1.CompactTextString(m) }
func (*CountByNames) ProtoMessage()               {}
func (*CountByNames) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CountByNames) GetCountByNames() []*CountByNames_MapElement {
	if m != nil {
		return m.CountByNames
	}
	return nil
}

type CountByNames_MapElement struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Count            *int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CountByNames_MapElement) Reset()                    { *m = CountByNames_MapElement{} }
func (m *CountByNames_MapElement) String() string            { return proto1.CompactTextString(m) }
func (*CountByNames_MapElement) ProtoMessage()               {}
func (*CountByNames_MapElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *CountByNames_MapElement) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CountByNames_MapElement) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CountRegistrationsByIPRequest struct {
	Ip               *string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Range            *Range  `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CountRegistrationsByIPRequest) Reset()                    { *m = CountRegistrationsByIPRequest{} }
func (m *CountRegistrationsByIPRequest) String() string            { return proto1.CompactTextString(m) }
func (*CountRegistrationsByIPRequest) ProtoMessage()               {}
func (*CountRegistrationsByIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CountRegistrationsByIPRequest) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *CountRegistrationsByIPRequest) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type GetSCTReceiptRequest struct {
	Serial           *string `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	LogID            *string `protobuf:"bytes,2,opt,name=logID" json:"logID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetSCTReceiptRequest) Reset()                    { *m = GetSCTReceiptRequest{} }
func (m *GetSCTReceiptRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetSCTReceiptRequest) ProtoMessage()               {}
func (*GetSCTReceiptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetSCTReceiptRequest) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

func (m *GetSCTReceiptRequest) GetLogID() string {
	if m != nil && m.LogID != nil {
		return *m.LogID
	}
	return ""
}

type CountFQDNSetsRequest struct {
	Window           *int64   `protobuf:"varint,1,opt,name=window" json:"window,omitempty"`
	Domains          []string `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CountFQDNSetsRequest) Reset()                    { *m = CountFQDNSetsRequest{} }
func (m *CountFQDNSetsRequest) String() string            { return proto1.CompactTextString(m) }
func (*CountFQDNSetsRequest) ProtoMessage()               {}
func (*CountFQDNSetsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CountFQDNSetsRequest) GetWindow() int64 {
	if m != nil && m.Window != nil {
		return *m.Window
	}
	return 0
}

func (m *CountFQDNSetsRequest) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

type FQDNSetExistsRequest struct {
	Domains          []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FQDNSetExistsRequest) Reset()                    { *m = FQDNSetExistsRequest{} }
func (m *FQDNSetExistsRequest) String() string            { return proto1.CompactTextString(m) }
func (*FQDNSetExistsRequest) ProtoMessage()               {}
func (*FQDNSetExistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *FQDNSetExistsRequest) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

type Exists struct {
	Exists           *bool  `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Exists) Reset()                    { *m = Exists{} }
func (m *Exists) String() string            { return proto1.CompactTextString(m) }
func (*Exists) ProtoMessage()               {}
func (*Exists) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Exists) GetExists() bool {
	if m != nil && m.Exists != nil {
		return *m.Exists
	}
	return false
}

type MarkCertificateRevokedRequest struct {
	Serial           *string `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	Code             *int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MarkCertificateRevokedRequest) Reset()                    { *m = MarkCertificateRevokedRequest{} }
func (m *MarkCertificateRevokedRequest) String() string            { return proto1.CompactTextString(m) }
func (*MarkCertificateRevokedRequest) ProtoMessage()               {}
func (*MarkCertificateRevokedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MarkCertificateRevokedRequest) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

func (m *MarkCertificateRevokedRequest) GetCode() int64 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

type AddCertificateResponse struct {
	Digest           *string `protobuf:"bytes,1,opt,name=digest" json:"digest,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AddCertificateResponse) Reset()                    { *m = AddCertificateResponse{} }
func (m *AddCertificateResponse) String() string            { return proto1.CompactTextString(m) }
func (*AddCertificateResponse) ProtoMessage()               {}
func (*AddCertificateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AddCertificateResponse) GetDigest() string {
	if m != nil && m.Digest != nil {
		return *m.Digest
	}
	return ""
}

type SignedCertificateTimestamp struct {
	Id                *int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SctVersion        *int64  `protobuf:"varint,2,opt,name=sctVersion" json:"sctVersion,omitempty"`
	LogID             *string `protobuf:"bytes,3,opt,name=logID" json:"logID,omitempty"`
	Timestamp         *int64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Extensions        []byte  `protobuf:"bytes,5,opt,name=extensions" json:"extensions,omitempty"`
	Signature         []byte  `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	CertificateSerial *string `protobuf:"bytes,7,opt,name=certificateSerial" json:"certificateSerial,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *SignedCertificateTimestamp) Reset()                    { *m = SignedCertificateTimestamp{} }
func (m *SignedCertificateTimestamp) String() string            { return proto1.CompactTextString(m) }
func (*SignedCertificateTimestamp) ProtoMessage()               {}
func (*SignedCertificateTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SignedCertificateTimestamp) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SignedCertificateTimestamp) GetSctVersion() int64 {
	if m != nil && m.SctVersion != nil {
		return *m.SctVersion
	}
	return 0
}

func (m *SignedCertificateTimestamp) GetLogID() string {
	if m != nil && m.LogID != nil {
		return *m.LogID
	}
	return ""
}

func (m *SignedCertificateTimestamp) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *SignedCertificateTimestamp) GetExtensions() []byte {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *SignedCertificateTimestamp) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedCertificateTimestamp) GetCertificateSerial() string {
	if m != nil && m.CertificateSerial != nil {
		return *m.CertificateSerial
	}
	return ""
}

type RevokeAuthorizationsByDomainRequest struct {
	Domain           *string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RevokeAuthorizationsByDomainRequest) Reset()         { *m = RevokeAuthorizationsByDomainRequest{} }
func (m *RevokeAuthorizationsByDomainRequest) String() string { return proto1.CompactTextString(m) }
func (*RevokeAuthorizationsByDomainRequest) ProtoMessage()    {}
func (*RevokeAuthorizationsByDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *RevokeAuthorizationsByDomainRequest) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

type RevokeAuthorizationsByDomainResponse struct {
	Finalized        *int64 `protobuf:"varint,1,opt,name=finalized" json:"finalized,omitempty"`
	Pending          *int64 `protobuf:"varint,2,opt,name=pending" json:"pending,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RevokeAuthorizationsByDomainResponse) Reset()         { *m = RevokeAuthorizationsByDomainResponse{} }
func (m *RevokeAuthorizationsByDomainResponse) String() string { return proto1.CompactTextString(m) }
func (*RevokeAuthorizationsByDomainResponse) ProtoMessage()    {}
func (*RevokeAuthorizationsByDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

func (m *RevokeAuthorizationsByDomainResponse) GetFinalized() int64 {
	if m != nil && m.Finalized != nil {
		return *m.Finalized
	}
	return 0
}

func (m *RevokeAuthorizationsByDomainResponse) GetPending() int64 {
	if m != nil && m.Pending != nil {
		return *m.Pending
	}
	return 0
}

func init() {
	proto1.RegisterType((*RegistrationID)(nil), "sa.RegistrationID")
	proto1.RegisterType((*JsonWebKey)(nil), "sa.JsonWebKey")
	proto1.RegisterType((*AuthorizationID)(nil), "sa.AuthorizationID")
	proto1.RegisterType((*GetValidAuthorizationsRequest)(nil), "sa.GetValidAuthorizationsRequest")
	proto1.RegisterType((*ValidAuthorizations)(nil), "sa.ValidAuthorizations")
	proto1.RegisterType((*CertificateStatus)(nil), "sa.CertificateStatus")
	proto1.RegisterType((*Serial)(nil), "sa.Serial")
	proto1.RegisterType((*Range)(nil), "sa.Range")
	proto1.RegisterType((*Count)(nil), "sa.Count")
	proto1.RegisterType((*CountCertificatesByNamesRequest)(nil), "sa.CountCertificatesByNamesRequest")
	proto1.RegisterType((*CountByNames)(nil), "sa.CountByNames")
	proto1.RegisterType((*CountByNames_MapElement)(nil), "sa.CountByNames.MapElement")
	proto1.RegisterType((*CountRegistrationsByIPRequest)(nil), "sa.CountRegistrationsByIPRequest")
	proto1.RegisterType((*GetSCTReceiptRequest)(nil), "sa.GetSCTReceiptRequest")
	proto1.RegisterType((*CountFQDNSetsRequest)(nil), "sa.CountFQDNSetsRequest")
	proto1.RegisterType((*FQDNSetExistsRequest)(nil), "sa.FQDNSetExistsRequest")
	proto1.RegisterType((*Exists)(nil), "sa.Exists")
	proto1.RegisterType((*MarkCertificateRevokedRequest)(nil), "sa.MarkCertificateRevokedRequest")
	proto1.RegisterType((*AddCertificateResponse)(nil), "sa.AddCertificateResponse")
	proto1.RegisterType((*SignedCertificateTimestamp)(nil), "sa.SignedCertificateTimestamp")
	proto1.RegisterType((*RevokeAuthorizationsByDomainRequest)(nil), "sa.RevokeAuthorizationsByDomainRequest")
	proto1.RegisterType((*RevokeAuthorizationsByDomainResponse)(nil), "sa.RevokeAuthorizationsByDomainResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for SA service

type SAClient interface {
	// Getters
	GetRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*core.Registration, error)
	GetRegistrationByKey(ctx context.Context, in *JsonWebKey, opts ...grpc.CallOption) (*core.Registration, error)
	GetAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*core.Authorization, error)
	GetValidAuthorizations(ctx context.Context, in *GetValidAuthorizationsRequest, opts ...grpc.CallOption) (*ValidAuthorizations, error)
	GetCertificate(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*core.Certificate, error)
	GetCertificateStatus(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*CertificateStatus, error)
	CountCertificatesRange(ctx context.Context, in *Range, opts ...grpc.CallOption) (*Count, error)
	CountCertificatesByNames(ctx context.Context, in *CountCertificatesByNamesRequest, opts ...grpc.CallOption) (*CountByNames, error)
	CountRegistrationsByIP(ctx context.Context, in *CountRegistrationsByIPRequest, opts ...grpc.CallOption) (*Count, error)
	CountPendingAuthorizations(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*Count, error)
	GetSCTReceipt(ctx context.Context, in *GetSCTReceiptRequest, opts ...grpc.CallOption) (*SignedCertificateTimestamp, error)
	CountFQDNSets(ctx context.Context, in *CountFQDNSetsRequest, opts ...grpc.CallOption) (*Count, error)
	FQDNSetExists(ctx context.Context, in *FQDNSetExistsRequest, opts ...grpc.CallOption) (*Exists, error)
	// Adders
	NewRegistration(ctx context.Context, in *core.Registration, opts ...grpc.CallOption) (*core.Registration, error)
	UpdateRegistration(ctx context.Context, in *core.Registration, opts ...grpc.CallOption) (*core.Empty, error)
	NewPendingAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Authorization, error)
	UpdatePendingAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Empty, error)
	FinalizeAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Empty, error)
	MarkCertificateRevoked(ctx context.Context, in *MarkCertificateRevokedRequest, opts ...grpc.CallOption) (*core.Empty, error)
	AddCertificate(ctx context.Context, in *core.CertificateRequest, opts ...grpc.CallOption) (*AddCertificateResponse, error)
	AddSCTReceipt(ctx context.Context, in *SignedCertificateTimestamp, opts ...grpc.CallOption) (*core.Empty, error)
	RevokeAuthorizationsByDomain(ctx context.Context, in *RevokeAuthorizationsByDomainRequest, opts ...grpc.CallOption) (*RevokeAuthorizationsByDomainResponse, error)
	DeactivateRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*core.Empty, error)
	DeactivateAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*core.Empty, error)
}

type sAClient struct {
	cc *grpc.ClientConn
}

func NewSAClient(cc *grpc.ClientConn) SAClient {
	return &sAClient{cc}
}

func (c *sAClient) GetRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*core.Registration, error) {
	out := new(core.Registration)
	err := grpc.Invoke(ctx, "/sa.SA/GetRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) GetRegistrationByKey(ctx context.Context, in *JsonWebKey, opts ...grpc.CallOption) (*core.Registration, error) {
	out := new(core.Registration)
	err := grpc.Invoke(ctx, "/sa.SA/GetRegistrationByKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) GetAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*core.Authorization, error) {
	out := new(core.Authorization)
	err := grpc.Invoke(ctx, "/sa.SA/GetAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) GetValidAuthorizations(ctx context.Context, in *GetValidAuthorizationsRequest, opts ...grpc.CallOption) (*ValidAuthorizations, error) {
	out := new(ValidAuthorizations)
	err := grpc.Invoke(ctx, "/sa.SA/GetValidAuthorizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) GetCertificate(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*core.Certificate, error) {
	out := new(core.Certificate)
	err := grpc.Invoke(ctx, "/sa.SA/GetCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) GetCertificateStatus(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*CertificateStatus, error) {
	out := new(CertificateStatus)
	err := grpc.Invoke(ctx, "/sa.SA/GetCertificateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) CountCertificatesRange(ctx context.Context, in *Range, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := grpc.Invoke(ctx, "/sa.SA/CountCertificatesRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) CountCertificatesByNames(ctx context.Context, in *CountCertificatesByNamesRequest, opts ...grpc.CallOption) (*CountByNames, error) {
	out := new(CountByNames)
	err := grpc.Invoke(ctx, "/sa.SA/CountCertificatesByNames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) CountRegistrationsByIP(ctx context.Context, in *CountRegistrationsByIPRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := grpc.Invoke(ctx, "/sa.SA/CountRegistrationsByIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) CountPendingAuthorizations(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := grpc.Invoke(ctx, "/sa.SA/CountPendingAuthorizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) GetSCTReceipt(ctx context.Context, in *GetSCTReceiptRequest, opts ...grpc.CallOption) (*SignedCertificateTimestamp, error) {
	out := new(SignedCertificateTimestamp)
	err := grpc.Invoke(ctx, "/sa.SA/GetSCTReceipt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) CountFQDNSets(ctx context.Context, in *CountFQDNSetsRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := grpc.Invoke(ctx, "/sa.SA/CountFQDNSets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) FQDNSetExists(ctx context.Context, in *FQDNSetExistsRequest, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := grpc.Invoke(ctx, "/sa.SA/FQDNSetExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) NewRegistration(ctx context.Context, in *core.Registration, opts ...grpc.CallOption) (*core.Registration, error) {
	out := new(core.Registration)
	err := grpc.Invoke(ctx, "/sa.SA/NewRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) UpdateRegistration(ctx context.Context, in *core.Registration, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.SA/UpdateRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) NewPendingAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Authorization, error) {
	out := new(core.Authorization)
	err := grpc.Invoke(ctx, "/sa.SA/NewPendingAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) UpdatePendingAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.SA/UpdatePendingAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) FinalizeAuthorization(ctx context.Context, in *core.Authorization, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.SA/FinalizeAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) MarkCertificateRevoked(ctx context.Context, in *MarkCertificateRevokedRequest, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.SA/MarkCertificateRevoked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) AddCertificate(ctx context.Context, in *core.CertificateRequest, opts ...grpc.CallOption) (*AddCertificateResponse, error) {
	out := new(AddCertificateResponse)
	err := grpc.Invoke(ctx, "/sa.SA/AddCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) AddSCTReceipt(ctx context.Context, in *SignedCertificateTimestamp, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.SA/AddSCTReceipt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) RevokeAuthorizationsByDomain(ctx context.Context, in *RevokeAuthorizationsByDomainRequest, opts ...grpc.CallOption) (*RevokeAuthorizationsByDomainResponse, error) {
	out := new(RevokeAuthorizationsByDomainResponse)
	err := grpc.Invoke(ctx, "/sa.SA/RevokeAuthorizationsByDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) DeactivateRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.SA/DeactivateRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) DeactivateAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*core.Empty, error) {
	out := new(core.Empty)
	err := grpc.Invoke(ctx, "/sa.SA/DeactivateAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SA service

type SAServer interface {
	// Getters
	GetRegistration(context.Context, *RegistrationID) (*core.Registration, error)
	GetRegistrationByKey(context.Context, *JsonWebKey) (*core.Registration, error)
	GetAuthorization(context.Context, *AuthorizationID) (*core.Authorization, error)
	GetValidAuthorizations(context.Context, *GetValidAuthorizationsRequest) (*ValidAuthorizations, error)
	GetCertificate(context.Context, *Serial) (*core.Certificate, error)
	GetCertificateStatus(context.Context, *Serial) (*CertificateStatus, error)
	CountCertificatesRange(context.Context, *Range) (*Count, error)
	CountCertificatesByNames(context.Context, *CountCertificatesByNamesRequest) (*CountByNames, error)
	CountRegistrationsByIP(context.Context, *CountRegistrationsByIPRequest) (*Count, error)
	CountPendingAuthorizations(context.Context, *RegistrationID) (*Count, error)
	GetSCTReceipt(context.Context, *GetSCTReceiptRequest) (*SignedCertificateTimestamp, error)
	CountFQDNSets(context.Context, *CountFQDNSetsRequest) (*Count, error)
	FQDNSetExists(context.Context, *FQDNSetExistsRequest) (*Exists, error)
	// Adders
	NewRegistration(context.Context, *core.Registration) (*core.Registration, error)
	UpdateRegistration(context.Context, *core.Registration) (*core.Empty, error)
	NewPendingAuthorization(context.Context, *core.Authorization) (*core.Authorization, error)
	UpdatePendingAuthorization(context.Context, *core.Authorization) (*core.Empty, error)
	FinalizeAuthorization(context.Context, *core.Authorization) (*core.Empty, error)
	MarkCertificateRevoked(context.Context, *MarkCertificateRevokedRequest) (*core.Empty, error)
	AddCertificate(context.Context, *core.CertificateRequest) (*AddCertificateResponse, error)
	AddSCTReceipt(context.Context, *SignedCertificateTimestamp) (*core.Empty, error)
	RevokeAuthorizationsByDomain(context.Context, *RevokeAuthorizationsByDomainRequest) (*RevokeAuthorizationsByDomainResponse, error)
	DeactivateRegistration(context.Context, *RegistrationID) (*core.Empty, error)
	DeactivateAuthorization(context.Context, *AuthorizationID) (*core.Empty, error)
}

func RegisterSAServer(s *grpc.Server, srv SAServer) {
	s.RegisterService(&_SA_serviceDesc, srv)
}

func _SA_GetRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).GetRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/GetRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).GetRegistration(ctx, req.(*RegistrationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_GetRegistrationByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonWebKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).GetRegistrationByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/GetRegistrationByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).GetRegistrationByKey(ctx, req.(*JsonWebKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_GetAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).GetAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/GetAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).GetAuthorization(ctx, req.(*AuthorizationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_GetValidAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).GetValidAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/GetValidAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).GetValidAuthorizations(ctx, req.(*GetValidAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Serial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).GetCertificate(ctx, req.(*Serial))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_GetCertificateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Serial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).GetCertificateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/GetCertificateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).GetCertificateStatus(ctx, req.(*Serial))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_CountCertificatesRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Range)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).CountCertificatesRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/CountCertificatesRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).CountCertificatesRange(ctx, req.(*Range))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_CountCertificatesByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCertificatesByNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).CountCertificatesByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/CountCertificatesByNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).CountCertificatesByNames(ctx, req.(*CountCertificatesByNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_CountRegistrationsByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRegistrationsByIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).CountRegistrationsByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/CountRegistrationsByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).CountRegistrationsByIP(ctx, req.(*CountRegistrationsByIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_CountPendingAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).CountPendingAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/CountPendingAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).CountPendingAuthorizations(ctx, req.(*RegistrationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_GetSCTReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSCTReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).GetSCTReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/GetSCTReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).GetSCTReceipt(ctx, req.(*GetSCTReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_CountFQDNSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFQDNSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).CountFQDNSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/CountFQDNSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).CountFQDNSets(ctx, req.(*CountFQDNSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_FQDNSetExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FQDNSetExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).FQDNSetExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/FQDNSetExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).FQDNSetExists(ctx, req.(*FQDNSetExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_NewRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).NewRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/NewRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).NewRegistration(ctx, req.(*core.Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_UpdateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).UpdateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/UpdateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).UpdateRegistration(ctx, req.(*core.Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_NewPendingAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).NewPendingAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/NewPendingAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).NewPendingAuthorization(ctx, req.(*core.Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_UpdatePendingAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).UpdatePendingAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/UpdatePendingAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).UpdatePendingAuthorization(ctx, req.(*core.Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_FinalizeAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).FinalizeAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/FinalizeAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).FinalizeAuthorization(ctx, req.(*core.Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_MarkCertificateRevoked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkCertificateRevokedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).MarkCertificateRevoked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/MarkCertificateRevoked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).MarkCertificateRevoked(ctx, req.(*MarkCertificateRevokedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_AddCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).AddCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/AddCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).AddCertificate(ctx, req.(*core.CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_AddSCTReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedCertificateTimestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).AddSCTReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/AddSCTReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).AddSCTReceipt(ctx, req.(*SignedCertificateTimestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_RevokeAuthorizationsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAuthorizationsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).RevokeAuthorizationsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/RevokeAuthorizationsByDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).RevokeAuthorizationsByDomain(ctx, req.(*RevokeAuthorizationsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_DeactivateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).DeactivateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/DeactivateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).DeactivateRegistration(ctx, req.(*RegistrationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_DeactivateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).DeactivateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.SA/DeactivateAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).DeactivateAuthorization(ctx, req.(*AuthorizationID))
	}
	return interceptor(ctx, in, info, handler)
}

var _SA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sa.SA",
	HandlerType: (*SAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegistration",
			Handler:    _SA_GetRegistration_Handler,
		},
		{
			MethodName: "GetRegistrationByKey",
			Handler:    _SA_GetRegistrationByKey_Handler,
		},
		{
			MethodName: "GetAuthorization",
			Handler:    _SA_GetAuthorization_Handler,
		},
		{
			MethodName: "GetValidAuthorizations",
			Handler:    _SA_GetValidAuthorizations_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _SA_GetCertificate_Handler,
		},
		{
			MethodName: "GetCertificateStatus",
			Handler:    _SA_GetCertificateStatus_Handler,
		},
		{
			MethodName: "CountCertificatesRange",
			Handler:    _SA_CountCertificatesRange_Handler,
		},
		{
			MethodName: "CountCertificatesByNames",
			Handler:    _SA_CountCertificatesByNames_Handler,
		},
		{
			MethodName: "CountRegistrationsByIP",
			Handler:    _SA_CountRegistrationsByIP_Handler,
		},
		{
			MethodName: "CountPendingAuthorizations",
			Handler:    _SA_CountPendingAuthorizations_Handler,
		},
		{
			MethodName: "GetSCTReceipt",
			Handler:    _SA_GetSCTReceipt_Handler,
		},
		{
			MethodName: "CountFQDNSets",
			Handler:    _SA_CountFQDNSets_Handler,
		},
		{
			MethodName: "FQDNSetExists",
			Handler:    _SA_FQDNSetExists_Handler,
		},
		{
			MethodName: "NewRegistration",
			Handler:    _SA_NewRegistration_Handler,
		},
		{
			MethodName: "UpdateRegistration",
			Handler:    _SA_UpdateRegistration_Handler,
		},
		{
			MethodName: "NewPendingAuthorization",
			Handler:    _SA_NewPendingAuthorization_Handler,
		},
		{
			MethodName: "UpdatePendingAuthorization",
			Handler:    _SA_UpdatePendingAuthorization_Handler,
		},
		{
			MethodName: "FinalizeAuthorization",
			Handler:    _SA_FinalizeAuthorization_Handler,
		},
		{
			MethodName: "MarkCertificateRevoked",
			Handler:    _SA_MarkCertificateRevoked_Handler,
		},
		{
			MethodName: "AddCertificate",
			Handler:    _SA_AddCertificate_Handler,
		},
		{
			MethodName: "AddSCTReceipt",
			Handler:    _SA_AddSCTReceipt_Handler,
		},
		{
			MethodName: "RevokeAuthorizationsByDomain",
			Handler:    _SA_RevokeAuthorizationsByDomain_Handler,
		},
		{
			MethodName: "DeactivateRegistration",
			Handler:    _SA_DeactivateRegistration_Handler,
		},
		{
			MethodName: "DeactivateAuthorization",
			Handler:    _SA_DeactivateAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("sa/proto/sa.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 995 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x72, 0x1a, 0x37,
	0x14, 0xe6, 0xc7, 0xd8, 0xe1, 0x18, 0xb0, 0x91, 0x6d, 0xbc, 0xd9, 0xc6, 0xad, 0xab, 0x74, 0x26,
	0xe4, 0x86, 0x34, 0x9e, 0x49, 0x7d, 0xe1, 0xba, 0x53, 0x63, 0x08, 0xb1, 0x33, 0xf1, 0xa4, 0x90,
	0xb8, 0x33, 0xbd, 0x53, 0xd9, 0x13, 0xaa, 0x1a, 0x76, 0xe9, 0x4a, 0x84, 0x90, 0xa7, 0xe9, 0x63,
	0xf5, 0x71, 0x3a, 0x92, 0x16, 0xd8, 0x3f, 0x70, 0x72, 0x27, 0xb4, 0xe7, 0x3b, 0xe7, 0x3b, 0x7f,
	0x9f, 0x80, 0xaa, 0x60, 0xcf, 0xc6, 0xbe, 0x27, 0xbd, 0x67, 0x82, 0x35, 0xf4, 0x81, 0xe4, 0x04,
	0xb3, 0x0f, 0xfa, 0x9e, 0x8f, 0xc1, 0x07, 0x75, 0x34, 0x9f, 0xe8, 0x23, 0xa8, 0x74, 0x71, 0xc0,
	0x85, 0xf4, 0x99, 0xe4, 0x9e, 0x7b, 0xd5, 0x22, 0x00, 0x39, 0xee, 0x58, 0xd9, 0xe3, 0x6c, 0x3d,
	0x4f, 0x1f, 0x02, 0x5c, 0x0b, 0xcf, 0xfd, 0x1d, 0xff, 0x7c, 0x8d, 0x33, 0xb2, 0x0d, 0xf9, 0xbf,
	0xa7, 0x77, 0xfa, 0x53, 0x91, 0x1e, 0xc1, 0xce, 0xc5, 0x44, 0xfe, 0xe5, 0xf9, 0xfc, 0x73, 0x12,
	0x59, 0xa4, 0xef, 0xe1, 0xa8, 0x83, 0xf2, 0x96, 0x0d, 0xb9, 0x13, 0x31, 0x13, 0x5d, 0xfc, 0x67,
	0x82, 0x42, 0x92, 0x1a, 0x54, 0xfc, 0x48, 0x60, 0x13, 0x92, 0xec, 0xc0, 0x96, 0xe3, 0x8d, 0x18,
	0x77, 0x85, 0x95, 0x3b, 0xce, 0xd7, 0x8b, 0x2a, 0xaa, 0xeb, 0x4d, 0xad, 0xbc, 0x26, 0x74, 0x00,
	0x7b, 0x29, 0x3e, 0xe9, 0x1e, 0x54, 0x2f, 0xd1, 0x97, 0xfc, 0x03, 0xef, 0x33, 0x89, 0x3d, 0xc9,
	0xe4, 0x44, 0x50, 0x0b, 0x36, 0x7b, 0xe8, 0x73, 0x36, 0x24, 0x15, 0xd8, 0x14, 0xfa, 0x14, 0x90,
	0x7b, 0x0a, 0x85, 0x2e, 0x73, 0x07, 0x48, 0x76, 0xe1, 0x01, 0x32, 0x7f, 0xc8, 0x51, 0xc8, 0x20,
	0x7c, 0x05, 0x36, 0x87, 0x4c, 0xaa, 0xdf, 0x39, 0x1d, 0xb0, 0x06, 0x85, 0x4b, 0x6f, 0xe2, 0x4a,
	0x52, 0x86, 0x42, 0x5f, 0x1d, 0x82, 0xca, 0x5c, 0xc3, 0x77, 0xfa, 0x3e, 0x14, 0x56, 0x34, 0x67,
	0x37, 0x6c, 0x84, 0x8b, 0x0c, 0x2d, 0x28, 0xf8, 0x2a, 0x8a, 0x46, 0x6c, 0x9f, 0x14, 0x1b, 0x82,
	0x35, 0x4c, 0xd8, 0x32, 0x14, 0x5c, 0x65, 0x69, 0x32, 0xa4, 0x43, 0x28, 0x69, 0x5f, 0x01, 0x9e,
	0x3c, 0x87, 0x52, 0x3f, 0xf4, 0xdb, 0xca, 0x1e, 0xe7, 0xeb, 0xdb, 0x27, 0xdf, 0x28, 0x7c, 0xd8,
	0xae, 0xf1, 0x86, 0x8d, 0xdb, 0x43, 0x1c, 0xa1, 0x2b, 0xed, 0xa7, 0x00, 0xcb, 0x5f, 0xa4, 0x04,
	0x1b, 0xca, 0xbf, 0xc9, 0x76, 0xc9, 0xdc, 0x64, 0xd4, 0x86, 0x23, 0xed, 0x25, 0xdc, 0x76, 0xd1,
	0x9c, 0x5d, 0xbd, 0x9d, 0xf3, 0x56, 0x6d, 0x1c, 0x07, 0xd8, 0x45, 0x0e, 0xb9, 0x58, 0x0e, 0xf4,
	0x05, 0xec, 0x77, 0x50, 0xf6, 0x2e, 0xdf, 0x75, 0xb1, 0x8f, 0x7c, 0x2c, 0xe7, 0xe8, 0x58, 0xad,
	0x55, 0xf4, 0xa1, 0x37, 0xb8, 0x6a, 0x69, 0x0f, 0x45, 0x7a, 0x0a, 0xfb, 0x3a, 0xfa, 0xcb, 0xdf,
	0x5a, 0x37, 0x3d, 0x94, 0x22, 0x04, 0x9b, 0x72, 0xd7, 0xf1, 0xa6, 0x2b, 0xc6, 0x80, 0x3e, 0x81,
	0xfd, 0x00, 0xd3, 0xfe, 0xc4, 0xc5, 0x12, 0x18, 0x32, 0xcc, 0x6a, 0x43, 0x0b, 0x36, 0x8d, 0x85,
	0xf2, 0x89, 0xfa, 0xa4, 0x7d, 0x3e, 0xa0, 0xe7, 0x70, 0xf4, 0x86, 0xf9, 0x77, 0xa1, 0x96, 0x75,
	0xf1, 0xa3, 0x77, 0x87, 0xce, 0x2a, 0xee, 0x25, 0xd8, 0xe8, 0x7b, 0x0e, 0x06, 0x85, 0xab, 0x43,
	0xed, 0xc2, 0x71, 0x22, 0x68, 0x31, 0xf6, 0x5c, 0x81, 0x0a, 0xe7, 0xf0, 0xc1, 0x7c, 0x88, 0x8a,
	0xf4, 0xdf, 0x2c, 0xd8, 0x3d, 0x3e, 0x70, 0x31, 0x6c, 0xfd, 0x8e, 0x8f, 0x50, 0x48, 0x36, 0x1a,
	0x87, 0x37, 0x8c, 0x10, 0x00, 0xd1, 0x97, 0xb7, 0xe8, 0x0b, 0xee, 0xb9, 0x26, 0xd0, 0xb2, 0x64,
	0x79, 0xcd, 0xa2, 0x0a, 0x45, 0x39, 0xc7, 0x5a, 0x1b, 0x73, 0x14, 0x7e, 0x92, 0xe8, 0x2a, 0x90,
	0xb0, 0x0a, 0xc7, 0xd9, 0x7a, 0x49, 0x99, 0x09, 0x3e, 0x70, 0x99, 0x9c, 0xf8, 0x68, 0x6d, 0xea,
	0xab, 0x87, 0x50, 0xed, 0x87, 0xd6, 0xc2, 0xa4, 0xb6, 0xa5, 0x29, 0xbe, 0x80, 0xc7, 0x26, 0xf9,
	0xe8, 0x26, 0x35, 0x67, 0x2d, 0x5d, 0xcc, 0x50, 0x45, 0x4c, 0x75, 0x83, 0xcc, 0xae, 0xe1, 0x87,
	0xf5, 0xb0, 0xa0, 0x22, 0x55, 0x28, 0x7e, 0xe0, 0x2e, 0x1b, 0xf2, 0xcf, 0xe8, 0x2c, 0x3b, 0x3a,
	0x46, 0xd7, 0xe1, 0xee, 0xc0, 0xa4, 0x79, 0xf2, 0x5f, 0x09, 0x72, 0xbd, 0x0b, 0x72, 0x06, 0x3b,
	0x1d, 0x8c, 0x4c, 0x23, 0x21, 0x7a, 0xcc, 0x22, 0xea, 0x60, 0x93, 0x86, 0x56, 0xad, 0xf0, 0x2d,
	0xcd, 0x90, 0x9f, 0xf5, 0x14, 0x86, 0x2f, 0x9b, 0x33, 0x25, 0x55, 0x15, 0xe5, 0x61, 0x29, 0x5d,
	0x2b, 0xd0, 0xbf, 0xc0, 0x6e, 0x07, 0x65, 0x24, 0x15, 0xb2, 0xa7, 0x90, 0x31, 0x65, 0xb3, 0xf7,
	0x0c, 0x3c, 0x72, 0x4d, 0x33, 0xe4, 0x16, 0x6a, 0xe9, 0x22, 0x47, 0xbe, 0x57, 0x5e, 0xd6, 0x0a,
	0xa0, 0x7d, 0xa8, 0x4c, 0xd2, 0xc4, 0x2c, 0x43, 0x9e, 0x43, 0xa5, 0x83, 0x61, 0x69, 0x21, 0xa0,
	0x8c, 0x4d, 0x03, 0xed, 0xaa, 0x21, 0x13, 0xfa, 0x4c, 0x33, 0xe4, 0x4c, 0x17, 0x22, 0x21, 0x82,
	0x11, 0xe0, 0x81, 0x56, 0x90, 0x84, 0x4e, 0x66, 0xc8, 0x8f, 0x50, 0x4b, 0x88, 0x99, 0x51, 0xaa,
	0xe5, 0xc2, 0xdb, 0xc5, 0x85, 0xfe, 0xd0, 0x0c, 0xe9, 0x81, 0xb5, 0x4a, 0xfe, 0xc8, 0xe3, 0x85,
	0xe1, 0x6a, 0x71, 0xb4, 0x77, 0xe3, 0x6a, 0x46, 0x33, 0xe4, 0x55, 0x40, 0x23, 0xa1, 0x4c, 0xa6,
	0x9c, 0x6b, 0x55, 0x2b, 0x4a, 0xef, 0x1c, 0x6c, 0x7d, 0x7c, 0x6b, 0x06, 0x2e, 0xd6, 0x9c, 0xb4,
	0xf1, 0x8a, 0xc0, 0x5f, 0x43, 0x39, 0xa2, 0x6d, 0xc4, 0x0a, 0xda, 0x99, 0x90, 0x3b, 0xfb, 0x5b,
	0x5d, 0xdf, 0x95, 0xbb, 0x4e, 0x33, 0xe4, 0x27, 0x28, 0x47, 0x14, 0xcf, 0x38, 0x4b, 0x13, 0xc1,
	0x28, 0x89, 0x53, 0x28, 0x47, 0x04, 0xcf, 0xe0, 0xd2, 0x34, 0xd0, 0xd6, 0x4d, 0x36, 0x57, 0x7a,
	0x14, 0x76, 0x6e, 0x70, 0x1a, 0x5b, 0xa8, 0xc4, 0xf8, 0xaf, 0x58, 0x89, 0x53, 0x20, 0xef, 0xc7,
	0x8e, 0x16, 0xb7, 0x7b, 0xf0, 0xdb, 0xe6, 0xae, 0x3d, 0x1a, 0xcb, 0x19, 0xcd, 0x90, 0x36, 0x1c,
	0xde, 0xe0, 0x34, 0xad, 0xe0, 0x24, 0x6d, 0x7b, 0x56, 0xad, 0xd4, 0xaf, 0x60, 0x9b, 0xf8, 0x5f,
	0xee, 0x29, 0x46, 0xe4, 0x0c, 0x0e, 0x5e, 0x06, 0xd2, 0xf3, 0xf5, 0xe0, 0x6b, 0xa8, 0xa5, 0x3f,
	0x11, 0x66, 0x04, 0xd7, 0x3e, 0x1f, 0x71, 0x5f, 0xaf, 0xa0, 0x12, 0x7d, 0x2f, 0x88, 0x95, 0xd8,
	0xdc, 0x39, 0xd4, 0xd6, 0xaa, 0x93, 0xfa, 0xba, 0x68, 0x9d, 0x2a, 0x5f, 0x38, 0x4e, 0x68, 0x1e,
	0xef, 0x99, 0xba, 0x38, 0x13, 0x01, 0x8f, 0xd6, 0xa9, 0x36, 0x79, 0x62, 0x16, 0xe2, 0xde, 0xe7,
	0xc0, 0xae, 0xdf, 0x6f, 0xb8, 0x20, 0x7d, 0x06, 0xb5, 0x16, 0xb2, 0xbe, 0xe4, 0x1f, 0x93, 0xd3,
	0x94, 0xdc, 0xbf, 0x18, 0xe3, 0x73, 0x38, 0x5c, 0x82, 0xbf, 0x40, 0xa0, 0xa3, 0xf0, 0xe6, 0xd6,
	0x1f, 0x05, 0xfd, 0xf7, 0xf6, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23, 0xeb, 0xde, 0x19, 0x0d,
	0x0b, 0x00, 0x00,
}
