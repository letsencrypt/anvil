// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/letsencrypt/boulder/core (interfaces: Publisher)

package mock_publisher

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
)

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return _m.recorder
}

// SubmitToCT mocks base method
func (_m *MockPublisher) SubmitToCT(_param0 context.Context, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "SubmitToCT", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitToCT indicates an expected call of SubmitToCT
func (_mr *MockPublisherMockRecorder) SubmitToCT(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubmitToCT", arg0, arg1)
}

// SubmitToSingleCT mocks base method
func (_m *MockPublisher) SubmitToSingleCT(_param0 context.Context, _param1 string, _param2 string, _param3 []byte) error {
	ret := _m.ctrl.Call(_m, "SubmitToSingleCT", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitToSingleCT indicates an expected call of SubmitToSingleCT
func (_mr *MockPublisherMockRecorder) SubmitToSingleCT(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubmitToSingleCT", arg0, arg1, arg2, arg3)
}
